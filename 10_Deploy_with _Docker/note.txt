from flask import jsonify

@people.route("/delete/<int:pid>", methods=["DELETE"])
def delete(pid):
    # Find the person by pid
    person = Person.query.get(pid)
    if not person:
        return jsonify({"error": "Person not found"}), 404

    # Delete the person
    db.session.delete(person)
    db.session.commit()

    # Return a success response
    return jsonify({"success": True}), 200



{% extends "base.html" %}

{% block title %}People Page{% endblock %}

{% block content %}
    <ul>
        {% for person in people %}
            <li id="person-{{ person.pid }}">
                {{ person.name }} 
                <button onclick="deletePerson({{ person.pid }})">Delete</button>
            </li>
        {% endfor %}
    </ul>

    <h3>Go to Create Person</h3>
    <a href="{{ url_for('people.create') }}">Create Person</a>

    <script type="text/javascript">
        const deletePerson = (pid) => {
            const deleteUrl = `{{ url_for('people.delete', pid=0) }}`.replace(0, pid);
            console.log("Sending DELETE request to:", deleteUrl); // Debugging log

            fetch(deleteUrl, {
                method: "DELETE"
            })
            .then(res => res.json())
            .then(data => {
                console.log("Server response:", data); // Log response from the server

                if (data.success) {
                    // Dynamically remove the person's <li> element from the DOM
                    const personElement = document.querySelector(`#person-${pid}`);
                    if (personElement) {
                        personElement.remove();
                    }
                } else {
                    console.error("Error during deletion:", data.error);
                }
            })
            .catch(err => {
                console.error("Error during fetch:", err);
            });
        }
    </script>
{% endblock %}



----------------------------------------------------------------------------------------------



from flask import request, render_template, redirect, url_for, Blueprint, Flask, jsonify

from blueprint_app.app import db
from blueprint_app.blueprints.people.models import Person

# app = Flask(__name__)

# blueprint

people = Blueprint("people", __name__, template_folder="templates")


@people.route("/")
def index():
    people = Person.query.all()
    return render_template("people/index.html", people=people)


@people.route("/create", methods=["GET", "POST"])
def create():
    if request.method == "GET":
        return render_template("people/create.html")

    elif request.method == "POST":
        name = request.form.get("name")
        age = request.form["age"]
        job = request.form["job"]

        job = job if job != "" else None

        person = Person(name=name, age=age, job=job)
        db.session.add(person)
        db.session.commit()

        return redirect(url_for("people.index"))


@people.route("/delete/<pid>", methods=["DELETE"])
def delete(pid):
    Person.query.filter(Person.pid == pid).delete()

    db.session.commit()
    people = Person.query.all()
    
    # return redirect(url_for("people.index"))
    return jsonify({"success": True}), 200




{% extends "base.html" %}

{% block title %}People Page{% endblock  %}

{% block content %}

    <ul>
        {% for person in people %}
            <li id="person-{{ person.pid }}">
                {{ person }} 
                <button onclick="deletePerson({{ person.pid }})">Delete</button>
            </li>
        {% endfor %}
    </ul>

    <h3>Go to Create Person</h3>
    <a href="{{url_for("people.create")}}">Create Person</a>

    <script type="text/javascript">

        const deletePerson = (pid) => {
            fetch('{{url_for("people.delete", pid=pid)}}' + pid, {
                method: "DELETE"
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {

                    const personElement = document.querySelector(`#person-${pid}`);
                    if (personElement) {
                        personElement.remove();
                    }

                } else {
                    console.error("Failed to delete item with pid : ", pid)
                }
            }).catch(err => console.error("Error during fetching : ", err))
        }

    </script>

{% endblock  %}



----------------------------------------------------------------------------------------------



remove instance / db file 
remove migrations file 



# Build the Docker Image
docker build --tag blueprint-docker .


# Run the Docker Container
docker run -p 8000:8000 --name mycontainername blueprint-app 


https://www.youtube.com/watch?v=oiKHGyl8bxo&list=PL7yh-TELLS1EyAye_UMnlsTGKxg8uatkM&index=10


docker run -d -p 8000:8000 blueprint-docker

8fc12d0e0e79e4d7c3d1a9974ada5ebbb4995487ee3e4467f861b2a2ed396465

docker ps

docker stop 8fc12d0e0e


# save docker image 

docker save -o blueprintdocker.tar blueprint-docker 

upload tar file (docker image) to server 


tldr SCP

scp blueprint 
scp blueprintdocker.tar root@ 

docker load -i blueprintdocker.tar

docker run -d -p 8000:8000 blueprint-docker



